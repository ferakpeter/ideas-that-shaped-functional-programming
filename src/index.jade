doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Ideas that shaped Functional Programming

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section
        h1 Ideas that shaped Functional Programming
        h3
          a(href='https://twitter.com/ferakpeter') @ferakpeter
        img.avatar(src='images/profile.png')

      section
        img.avatar(src='images/codinghorror.png')
        br
        blockquote.
          Any application that <strong>can</strong> be written in JavaScript <strong>will</strong> eventually be written in JavaScript.
        br
        p
          a(href='https://twitter.com/codinghorror') Jeff Atwood

      section
        h2 Fast forward
        ul
          li Languages are going meta
          li Not restricted to the platform they will run on
          li Static Typing is very useful
          li Developer Experience and tooling

      section
        h2 Let's branch into a different domain
        img.img--med(src='images/music.jpg')

      section
        h2 Where are the similarities?
        ul
          li Fast paced, constantly changing
          li Trends matter
          li "Open-source"
          li Highly dependend on "hardware"
          li Usually performed by groups of individuals with different skill-sets

      section
        h2 How is music taught?

      section
        img.img--full(src='images/music-teaching1.jpg')

      section
        img.img--full(src='images/radio.jpg')

      section
        h2 Music evolves all the time...

      section
        img.img--full(src='images/music-styles.jpg')

      section
        ul
          li Musical ideas spread through communities, influence each others
          li Changes are incremental and usually small
          li But sometimes there are game-changers (paradigm-shifts)

      section
        img.img--med(src='images/electric-guitar.jpg')

      section
        h2 The electric guitar changed everything

      section
        h2 Did something like that happen in Tech?

      section
        h2 Backend

      section
        h2 Cloud was a new way to scale the backend
        img.img--med(src='images/horizontal-vs-vertical-scaling-vertical-and-horizontal-scaling-explained-diagram.png')

      section
        h2 Summary
        ul
          li Java and JVM better at squeezing all the juice out of a box
          li Functional paradigm better for stateless services

      section
        h2 Frontend

      section
        img.img--full(src='images/desktop-frontends.png')

      section
        img.img--full(src='images/web-frontend.jpg')

      section
        img.img--full(src='images/mobile-apps.jpg')

      section
        h2 Summary
        ul
          li Devices (Desktop to Web to Mobile)
          li Space
          li UX
          li Product design more integrated with dev teams
          li Less clutter and smaller applications
          li That serve specific use-cases
          li State can be distributed between applications

      section
        h2 Programming languages

      section
        h2 1950's & 60's
        ul
          li FORTRAN
          li LISP
          li COBOL
          li BASIC

      section
        h2 1970's
        ul
          li Pascal
          li C
          li Smalltalk
          li ML

      section
        h2 1980's
        ul
          li C++
          li Common Lisp
          li Erlang
          li Perl

      section
        h2 1990's
        ul
          li Haskell
          li Python
          li Ruby
          li JS
          li PHP

      section
        h2 2000's
        ul
          li C#
          li Scala
          li F#
          li Clojure
          li Go

      section
        h2 2010's
        ul
          li Rust
          li Dart
          li Kotlin
          li ReasonML

      section
        img.img--full(src='images/programming-paradigms.jpg')

      section
        h2 Summary
        ul
          li Both OOP and FP are designed to manage state in smaller chunks
          li Both are an answer to imperative procedural languages (GOTO:)

      section
        h2 So what are the differences?

      section
        h2 OOP concepts are easier to misuse than FP
        ul
          li If objects are supposed to mutate each other with messages, why is this possible?
        pre
          code.language-javascript.
            var ret = '';
            ret = project.namespace + '.' + project.repository;
            ret += (project.subfolder === undefined
              || project.subfolder=='') ? '' : '.' + project.subfolder;
            ret += '.' + project.branch.replace(/\//g, '_');
            ret += (pipelineName === undefined) ? '' : '.' + pipelineName;
            return ret;

      section
        a(href='https://github.com/ferakpeter/nodejs-functional-example') example

      section
        h2 Summary
        ul Object Oriented
          li Better at context
          li Less reusable for new contexts
          li Easier to misuse

        ul Functional
          li Better at generics
          li Context needs to be managed
          li More reusable smaller chunks

      section
        h2 As programmers we are like divers

      section
        h2 Readability is a big deal

      section
        h2 Context is also a big deal

      section
        h2 Reusable stable building blocks?

      section
        h1 Mathematics is different...

      section
        pre
          code.language-javascript.
            N + 1

      section
        img.avatar.avatar--med(src='images/kaiser.png')
        ul
          li Kaiser
          li ... and Computer?

      section
        h2 David Hilbert
        img.avatar.avatar--med(src='images/hilbert.png')
        ul
          li Interested in the foundation of mathematics
          li Formal definition of an algorithm?
          li Entscheidungsproblem

      section
        h2 Kurt Gödel
        img.avatar.avatar--med(src='images/goedel.png')
        ul
          li Logic is not complete - “This statement is not provable”
          li Incompleteness theorems (1931)
          li We need a new formal definition of Algorithm

      section
        h2 Alonzo Church
        img.avatar.avatar--med(src='images/church.png')
        ul
          li Lambda Calculus an attempt to formally define Algorithm
          li Gödel defines recursive functions
          li Church proves they are equivalent to Lambda Calculus

      section
        h2 Alan Turing
        img.avatar.avatar--med(src='images/turing.png')
        ul
          li Turing settled the dispute
          li Church-Turing incompleteness thesis
          li 3 equivalent formal definitions of an algorithm: Church, Gödel, Turing

      section
        h2 Haskell Curry
        img.avatar.avatar--med(src='images/curry.png')
        ul
          li Curry–Howard correspondence
          li Curry–Howard isomorphism or equivalence
          li proofs-as-programs and propositions- or formulae-as-types interpretation


      section
        h2 Basics of set theory
        pre
          code.language-haskell.
            r :: [a] → [a]

      section
        img.img--med(src='images/functions.png')

      section
        img.img--med(src='images/functions2.png')

    section
        h2 18th century
        ul
          li Euler

      section
        h2 19th century
        ul
          li Gauss
          li Fregge
          li Cantor

      section
        h2 20th century
        ul
          li Hilbert
          li Gödel
          li Church
          li Turing
          li Curry

    section
      h1 Looking ahead

    section
      h2 Cloud is turning into smaller chunks
        ul
          li Cold starts
          li startup time
          li In a bigger sense the Infrastructure is getting more abstract
          li Can't just login to the server instance and change things

    section
      h2 OOP vs. FP
      h2 OOP like building a car
      h2 FP like building a traing

    section
      h2 Challenges ahead
      ul
        li Logging & Tracing (Context a.k.a cryptic error messages)
        li "Lean" Application chunks
        li



      section
        h1 Thank you!
        h3
          a(href='https://twitter.com/ferakpeter') @ferakpeter
        img.avatar.avatar--small(src='images/profile.png')

    script(src='build/build.js')